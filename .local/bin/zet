#!/usr/bin/env bash
# Simple bash script for managing a Zettelkasten

if [ -f "${XDG_CONFIG_HOME:-$HOME/.config}"/zet/config ]; then
    . "${XDG_CONFIG_HOME:-$HOME/.config}"/zet/config
elif [ -z "$ZETTEL_DIR" ]; then
    ZETTEL_DIR=${XDG_DATA_HOME:-$HOME/.local/share}/zet
fi

usage() {
    echo "Usage:
    zet s|show <name>
    zet o|open [name]
    zet n|new <name>
    zet l|list
    zet g|grep <pattern>
    zet t|tag [tag]
    zet h|help
    zet p|preview"
}

zet() {
    if [ $# -lt 1 ]; then
        usage >&2
        return 1
    fi

    if [ -z "$ZETTEL_DIR" ]; then
        echo "ZETTEL_DIR not set!" >&2
        return 1
    fi

    if [ ! -d "$ZETTEL_DIR" ]; then
        mkdir -p "$ZETTEL_DIR"
    fi

    case "$1" in
        h|help)
            usage
            return 0
            ;;
        s|show)
            if [ $# -lt 2 ]; then
                usage >&2
                return 1
            fi

            local zettel
            zettel="$ZETTEL_DIR"/"${2%.txt}".txt
            if [ ! -f "$zettel" ]; then
                echo "Zettel '$2' not found" >&2
                return 1
            fi
            cat "$zettel"
            ;;
        o|open)
            cd "$ZETTEL_DIR" || return 1
            if [ $# -lt 2 ]; then
                ${EDITOR:-vi}
            else
                shift
                local zettels
                zettels=()
                for zettel in "$@"; do
                    zettels+=("$ZETTEL_DIR"/"${zettel%.txt}".txt)
                done

                ${EDITOR:-vi} "${zettels[@]}"
            fi
            ;;
        n|new)
            if [ $# -lt 2 ]; then
                usage >&2
                return 1
            fi

            shift
            local title date fname file
            title="$*"
            date=$(date +%Y%m%d%H%M%S)
            fname="${date} $(sed -e 's/[^[:alnum:]]/_/g' -e 's/^_\|_$//' <<< "$*" | tr -s '_')"
            file="$ZETTEL_DIR"/"${fname//_/ }".txt
            cat > "$file" << EOF
---
title:    $title
date:     $(date +'%B %d, %Y')
keywords:
---
EOF
            cd "$ZETTEL_DIR" || return 1
            ${EDITOR:-vi} "$file"
            ;;
        l|ls|list)
            cd "$ZETTEL_DIR" || return 1
            readarray -t zettels < <(ls)
            if [ ${#zettels} -eq 0 ]; then
                echo "You have no zettels"
                return 0
            fi

            for zettel in "${zettels[@]}"; do
                echo "${zettel%.*}"
            done | sort | less -R --no-init --quit-if-one-screen
            ;;
        g|grep)
            if [ $# -lt 2 ]; then
                usage >&2
                return 1
            fi

            shift
            cd "$ZETTEL_DIR" || return 1
            readarray -t files < <(ls)
            for pat in "$@"; do
                readarray -t files < <({ grep -Fil "$pat" "${files[@]}" ; printf "%s\n" "${files[@]}" | grep -Fi "$pat" ; })
                if [ "${#files}" -eq 0 ]; then
                    break
                fi
            done

            for file in "${files[@]}"; do
                echo "${file%.*}"
            done | sort -u | less -R --no-init --quit-if-one-screen
            ;;
        t|tag)
            cd "$ZETTEL_DIR" || return 1
            if [ $# -lt 2 ]; then
                awk 'tolower($1) ~ /^(keywords|tags):/ {$1=""; print $0}' ./*.txt | tr ',' '\n' | sort -u | awk '{$1=$1;print}' | less -R --no-init --quit-if-one-screen
            else
                grep -H -i -E -- '^(keywords|tags):' * | grep -F -w "$2" | cut -d : -f 1 | while IFS= read -r zettel; do
                    echo "${zettel%.*}"
                done | sort | less -R --no-init --quit-if-one-screen
            fi
            ;;
        p|pre|prev|preview)
            if [ $# -lt 2 ]; then
                usage >&2
                return 1
            fi

            local zettel
            zettel="$ZETTEL_DIR"/"${2%.txt}".txt
            if [ ! -f "$zettel" ]; then
                echo "Zettel '$2' not found" >&2
                return 1
            fi

            if ! command -v pandoc >/dev/null; then
                echo "Couldn't find pandoc" >&2
                return 1
            fi

            cd "$ZETTEL_DIR" || return 1
            tmp=$(mktemp).html
            pandoc --standalone --to html --from markdown --output "$tmp" "$zettel"

            if [ -n "$BROWSER" ]; then
                $BROWSER "$tmp"
            elif command -v xdg-open >/dev/null; then
                xdg-open "$tmp"
            elif command -v open >/dev/null; then
                open "$tmp"
            elif command -v firefox >/dev/null; then
                firefox "$tmp"
            fi
            ;;
        *)
            usage >&2
            return 1
            ;;
    esac
}
zet "$@"
