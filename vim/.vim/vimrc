" Greg Anders (gpanders)'s vimrc <https://github.com/gpanders/dotfiles.git>

" Detect OS {{{
if !exists('g:os')
  if has('win64') || has('win32') || has('win16')
    let g:os = "Windows"
  else
    let g:os = substitute(system('uname'), '\n', '', '')
  endif
endif
" }}}

" Use vim-pathogen if native packages are not supported {{{
if !has('packages')
  " Use vim-pathogen to emulate native packaging behavior
  let s:vimdir = g:os ==# 'Windows' ? ($HOME . '/vimfiles') : ($HOME . '/.vim')
  if empty(glob(s:vimdir . '/autoload/pathogen.vim'))
    silent execute '!curl -LSso ' . s:vimdir . '/autoload/pathogen.vim https://tpo.pe/pathogen.vim'
  endif
  silent! execute pathogen#infect('pack/{}/start/{}', 'pack/{}/opt/{}')
endif
" }}}

if has('autocmd')
  filetype plugin indent on
endif

if has('syntax') && !exists('g:syntax_on')
  syntax enable
endif

" Set color scheme {{{

if has('termguicolors')
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  set termguicolors
else
  let g:onedark_termcolors = 16
endif

" Solarized {{{
" ---------
" if &bg ==# 'light'
"   silent! colorscheme flattened_light
" else
"   silent! colorscheme flattened_dark
" endif
" }}}
" One Dark {{{
" --------
silent! packadd! onedark.vim
silent! colorscheme onedark
" }}}

" If no other colorscheme, use vim default
if !exists('g:colors_name')
  set bg=dark
endif

" Try to make comments italic
highlight Comment gui=italic cterm=italic

" }}}

" GUI settings {{{
if has('gui_running')
  if g:os ==# 'Windows'
    set guifont=Fira_Mono:h10:cANSI:qDRAFT
  elseif g:os ==# 'Darwin'
    set guifont=FiraMono-Regular:h11
  endif
  set guioptions=teMg!
  set lines=60
  set columns=180
endif
" }}}

" Use UTF-8 if we can and env LANG didn't tell us not to
if has('multi_byte') && !exists('$LANG') && &encoding ==# 'latin1'
  set encoding=utf-8
endif

" Sudo save
cnoreabbrev w!! w !sudo tee > /dev/null %

" Settings {{{
" Press K to open help docs for option under the cursor
set smarttab
set tabstop=2
set softtabstop=2
set shiftwidth=2
set autoindent
set expandtab
set number
set hidden
set ignorecase
set smartcase
set gdefault
set magic
set incsearch
set hlsearch
set splitbelow
set splitright
set nostartofline
set scrolloff=2
set sidescrolloff=5
set showmatch
set matchtime=2
set matchpairs+=<:>
set colorcolumn=80
set foldmarker=\ {{{,\ }}}
set modeline
set virtualedit+=block
set lazyredraw
set linebreak
set include=
set nrformats-=octal
set display+=lastline
set autoread
set confirm

" Indent wrapped lines
silent! set breakindent

" Add more completion options
set completeopt+=longest   " Insert longest common substring
set completeopt+=menuone   " Show the menu even when there's only one match

if !has('nvim') && &ttimeoutlen == -1
  set ttimeout
  set ttimeoutlen=100
endif

" Allow backspacing over all whitespace
set backspace=indent,eol,start

" Specify whitespace chars
set listchars=tab:>\ ,trail:-,extends:>,precedes:<,nbsp:+

" Delete comment characters when joining commented lines
set formatoptions+=j

if has('path_extra')
  setglobal tags-=./tags tags-=./tags; tags^=./tags;
endif

" Increase Vim's command history
set history=1000

" Set max number of tab pages
set tabpagemax=50

" Keep and store UPPERCASE global variables
if !empty(&viminfo)
  set viminfo^=!
endif

" Don't save options in session files
set sessionoptions-=options

set path-=/usr/include     " Let C/C++ filetypes set this
set path+=**               " Search current directory's whole tree

set laststatus=2
set ruler
set wildmenu

set wildcharm=<C-Z>
set wildmode=full
set wildignorecase
set wildignore=*.swp,*.bak,*~,#*#
set wildignore+=*.o
set wildignore+=*/.git/**/*,*/.hg/**/*,*/.svn/**/*
set wildignore+=tags
" }}}

" Statusline {{{
" Set the statusline
set laststatus=2
set statusline=                              " Reset the statusline
set statusline+=%1*\ %<%f                    " Filename
set statusline+=\ %h%m%r\                    " Help/modified/RO markers
set statusline+=%2*\ %n\                     " Buffer number
set statusline+=%3*                          " Reset color
set statusline+=%=                           " Break point for right justify

if exists('*FugitiveHead')
  function! StatuslineGitBranch()
    let branch = FugitiveHead()
    if branch != ""
      return "î‚  " . branch
    endif
    return ""
  endfunction
  set statusline+=\ %{StatuslineGitBranch()}\  " Git branch (with icon)
endif

set statusline+=\ %{&ft}\                    " Filetype
set statusline+=%4*\ %P\                     " Percent through file
set statusline+=%5*\ %(%l:%c%V%)\            " Line and column number

" Set User1-9 highlight groups for statusline
" These are used by adding %N* to the statusline, where {N} is 1-9
" The following uses the solarized color scheme
if exists('g:colors_name')
  if g:colors_name ==# 'solarized8'
    if &background ==# 'light'
      hi User1 ctermfg=15 ctermbg=11 guifg=#fdf6e3 guibg=#657b83
      hi User2 ctermfg=15 ctermbg=14 guifg=#fdf6e3 guibg=#93a1a1
      hi User3 ctermfg=11 ctermbg=7 guifg=#657b83 guibg=#eee8d5
      hi User4 ctermfg=15 ctermbg=14 guifg=#fdf6e3 guibg=#93a1a1
      hi User5 ctermfg=15 ctermbg=11 guifg=#fdf6e3 guibg=#657b83
    else
      hi User1 ctermfg=8 ctermbg=12 guifg=#002b36 guibg=#839496
      hi User2 ctermfg=8 ctermbg=10 guifg=#002b36 guibg=#586e75
      hi User3 ctermfg=12 ctermbg=0 guifg=#839496 guibg=#073642
      hi User4 ctermfg=8 ctermbg=10 guifg=#002b36 guibg=#586e75
      hi User5 ctermfg=8 ctermbg=12 guifg=#002b36 guibg=#839496
    endif
  elseif g:colors_name ==# 'onedark'
    hi User1 cterm=reverse gui=reverse
    hi User2 ctermbg=237 guibg=#3e4452
    hi User3 ctermfg=145 ctermbg=235 guifg=#abb2bf guibg=#282c34
    hi User4 ctermbg=237 guibg=#3e4452
    hi User5 cterm=reverse gui=reverse
  endif
endif
" }}}

" Set a single backup directory
set backup
if g:os ==# 'Windows'
  set backupdir^=~/vimfiles/cache/backup
else
  set backupdir^=~/.vim/cache/backup
endif

" Enable persistent undo
if has('persistent_undo')
  set undofile
  if g:os ==# 'Windows'
    set undodir^=~/vimfiles/cache/undo
  else
    set undodir^=~/.vim/cache/undo
  endif
endif

" Keep swap files in one place
if g:os ==# 'Windows'
  set directory^=~/vimfiles/cache/swap//
else
  set directory^=~/.vim/cache/swap//
endif

" Load matchit.vim
runtime! macros/matchit.vim

" Insert mode mappings {{{

" jk in Insert mode escapes to Normal mode
inoremap jk <Esc>l

" Set a new 'undo point' before undoing entire line
inoremap <C-U> <C-G>u<C-U>

" Auto close braces in insert mode
inoremap {<CR> {<CR>}<Esc>ko

" Remap <C-H> to delete one shiftwidth of indent in the current line
inoremap <C-H> <C-D>

" Delete character under cursor
inoremap <C-D> <Del>

" Kill the rest of the line (similar to Emacs binding)
inoremap <C-K> <C-G>u<C-O>D

" <C-G><C-K> to enter digraphs (originally <C-K>'s job)
inoremap <C-G><C-K> <C-K>

" }}}

" Normal mode mappings {{{

" Save by pressing <leader>w
nnoremap <silent> ,w :w<CR>

" Navigate through wrapped lines individually
nnoremap <silent> j gj
nnoremap <silent> k gk

" Make :tjump easier
nnoremap g] g<C-]>

" Open tag under cursor in preview window
nnoremap g} <C-W>g}

" Map Q to gq
noremap Q gq

" Buffer shortcuts
nnoremap <silent> ,1 :b1<CR>
nnoremap <silent> ,2 :b2<CR>
nnoremap <silent> ,3 :b3<CR>
nnoremap <silent> ,4 :b4<CR>
nnoremap <silent> ,5 :b5<CR>
nnoremap <silent> ,6 :b6<CR>
nnoremap <silent> ,7 :b7<CR>
nnoremap <silent> ,8 :b8<CR>
nnoremap <silent> ,9 :b9<CR>
nnoremap <silent> ,0 :b10<CR>

" List buffers and put :b on the command line
noremap ,b :buffers<CR>:b<Space>

" Augment [I and ]I to place an :ij prompt below results for easy jumping
noremap [I [I:ij<Space> <C-R><C-W><S-Left><Left>
noremap ]I ]I:ij<Space> <C-R><C-W><S-Left><Left>

" Augment [D and ]D to place an :dj prompt below results for easy jumping
noremap [D [D:dj<Space> <C-R><C-W><S-Left><Left>
noremap ]D ]D:dj<Space> <C-R><C-W><S-Left><Left>

" Remap & to preserve substitution flags
nnoremap <silent> & :&&<CR>

" Backspace goes back to previous buffer
nnoremap <silent> <Backspace> <C-^>

" ,f prefixes find files in path
nnoremap ,f :find *

" Search for a tag by regex
nnoremap ,t :tjump /
nnoremap ,p :ptjump /

" Toggle folds
nnoremap <Space><Space> za

" Find files in current buffer's directory
nnoremap ,e :e <C-R>=expand('%:p:h') . '/' <CR>

" <Bslash>e opens .vimrc in new window
nnoremap <Bslash>ev :<C-U>tabe $MYVIMRC<CR>

" <Bslash>s sources .vimrc
nnoremap <Bslash>sv :<C-U>source $MYVIMRC<CR>

" Clear search buffer with <C-L>
nnoremap <silent> <C-L> :<C-U>nohlsearch<Bar>diffupdate<CR><C-L>
vnoremap <silent> <C-L> :<C-U>nohlsearch<Bar>diffupdate<CR>gv<C-L>

" ,c changes directory to current buffer's directory
nnoremap <silent> ,c :<C-U>cd %:h<CR>:echo 'Changed directory to ' . expand('%:p:h')<CR>

" \c changes local buffer directory to current buffer's directory
nnoremap <silent> <Bslash>c :<C-U>lcd %:h<CR>:echo 'Changed local directory to ' . expand('%:p:h')<CR>

" }}}

" Visual mode mappings {{{
vnoremap * y/\V<C-R>"<CR>
vnoremap # y?\V<C-R>"<CR>
" }}}

" Terminal mode mappings {{{
if exists(':tmap')
  tnoremap <silent> <C-W> <C-\><C-N><C-W>
  tnoremap <C-W><C-W> <C-W>
endif
" }}}

" Grep {{{

" Use ripgrep or ag as grepprg if available
if executable('rg')
  " Use rg over grep
  set grepprg=rg\ --vimgrep\ -S\ --hidden
elseif executable('ag')
  " Use ag over grep
  set grepprg=ag\ --vimgrep\ -S\ --hidden
endif

" Use \\ in Normal mode to use grepprg
" Define a custom command to wrap :grep with :silent, :copen, and :redraw
command! -nargs=+ -complete=file -bar -bang Grep silent! botright grep<bang> <args>|cwindow|redraw!
nnoremap <Bslash><Bslash> :Grep!<space>
" }}}

" Pushing built-in commands beyond their limits {{{
" https://gist.github.com/Konfekt/d8ce5626a48f4e56ecab31a89449f1f0
function! <sid>CCR()
  if getcmdtype() isnot# ':'
    return "\<CR>"
  endif
  let cmdline = getcmdline()
  if cmdline =~# '\v^\s*(ls|files|buffers)!?\s*(\s[+\-=auhx%#]+)?$'
    " like :ls but prompts for a buffer command
    return "\<CR>:b"
  elseif cmdline =~# '\v/(#|nu%[mber])$'
    " like :g//# but prompts for a command
    return "\<CR>:"
  elseif cmdline =~# '\v^\s*(dli%[st]|il%[ist])!?\s+\S'
    " like :dlist or :ilist but prompts for a count for :djump or :ijump
    return "\<CR>:" . cmdline[0] . "j  " . join(split(cmdline, " ")[1:]) . "\<C-B>\<S-Right>\<Right>"
  elseif cmdline =~# '\v^\s*(cli|lli)%[st]!?\s*(\s\d+(,\s*\d+)?)?$'
    " like :clist or :llist but prompts for an error/location number
    return "\<CR>:sil " . repeat(cmdline[0], 2) . "\<Space>"
  elseif cmdline =~# '\v^\s*ol%[dfiles]\s*$'
    " like :oldfiles but prompts for an old file to edit
    set nomore
    return "\<CR>:sil se more|e #<"
  elseif cmdline =~# '^\s*changes\s*$'
    " like :changes but prompts for a change to jump to
    set nomore
    return "\<CR>:sil se more|norm! g;\<S-Left>"
  elseif cmdline =~# '\v^\s*ju%[mps]'
    " like :jumps but prompts for a position to jump to
    set nomore
    return "\<CR>:sil se more|norm! \<C-o>\<S-Left>"
  elseif cmdline =~ '\v^\s*marks\s*(\s\w+)?$'
    " like :marks but prompts for a mark to jump to
    return "\<CR>:norm! `"
  elseif cmdline =~# '\v^\s*undol%[ist]'
    " like :undolist but prompts for a change to undo
    return "\<CR>:u "
  else
    return "\<c-]>\<CR>"
  endif
endfunction
cnoremap <expr> <CR> <sid>CCR()
" }}}

" Autocommands {{{
augroup vimrc
  autocmd!
  " Have Vim jump to the last position when reopening a file
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$")
        \ | exe "normal! g`\"" | endif

  " Highlight the current line in the current window but disable in Insert mode {{{
  let blacklist = ['tex']
  au InsertEnter * if index(blacklist, &ft) < 0
        \| let b:cul = &cursorline | setl nocursorline | endif
  au InsertLeave * if index(blacklist, &ft) < 0 && exists('b:cul')
        \| let &cursorline = b:cul | endif
  " }}}

  " Set marks by filetype for quick navigation
  au BufLeave *.h normal! mH
  au BufLeave *.c,*.cc,*.cpp normal! mC
  au BufLeave *.py normal! mP

  " Start insert immediately when terminal opens
  if exists('##TermOpen')
    au TermOpen * setlocal nonumber | startinsert
  endif

  if has('nvim')
    au BufEnter term://* startinsert
  else
  endif

augroup END
" }}}

" Enable per-project configuration {{{
set exrc
set secure
" }}}
