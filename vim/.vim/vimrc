" Greg Anders (gpanders)'s vimrc <https://github.com/gpanders/dotfiles.git>

" Clear all vimrc autocmds at the beginning
augroup vimrc | execute 'autocmd!' | augroup END

" Setup {{{

" Set $VIMHOME
if has('unix')
  let $VIMHOME = $HOME . '/.vim'
else
  let $VIMHOME = $HOME . '/vimfiles'
endif

" Use vim-pathogen if native packages are not supported
if !has('packages')
  " Use vim-pathogen to emulate native packaging behavior
  if empty(glob($VIMHOME . '/autoload/pathogen.vim'))
    silent execute '!curl -LSso ' . $VIMHOME . '/autoload/pathogen.vim https://tpo.pe/pathogen.vim'
  endif
  silent! execute pathogen#infect('pack/{}/start/{}', 'pack/{}/opt/{}')
endif

if has('autocmd')
  filetype plugin indent on
endif

if has('syntax') && !exists('g:syntax_on')
  syntax enable
endif
" }}}

" Colors {{{

" Try to make comments italic
autocmd vimrc ColorScheme * highlight Comment gui=italic cterm=italic

" Load colorscheme
silent! colorscheme base16-eighties

" If no other colorscheme, use vim default
if !exists('g:colors_name')
  set background=dark
endif

" Highlight trailing whitespace
highlight link TrailingWhitespace Error

" }}}

" Settings {{{
" Press K to open help docs for option under the cursor
set backup
set completeopt^=menuone
set confirm
set expandtab
set hidden
set ignorecase
set include=
set lazyredraw
set linebreak
set matchpairs+=<:>
set matchtime=2
set pumheight=10
set scrolloff=2
set shiftwidth=4
set showmatch
set noshowmode
set sidescrolloff=5
set smartcase
set softtabstop=4
set splitbelow
set splitright
set nostartofline
set noswapfile
silent! set tagcase=smart
set virtualedit+=block

if has('mouse')
  set mouse=a
endif

" Set options which are defaults in nvim
if !has('nvim')
  set autoindent
  set autoread
  set backspace=indent,eol,start  " Allow vim to delete whitespace
  silent! set belloff=all
  set complete-=i
  set display=lastline
  set nofsync
  set formatoptions+=j  " Remove comment character when joining lines
  set history=10000
  set hlsearch
  set incsearch
  set langnoremap
  silent! set nolangremap
  set laststatus=2
  set nrformats-=octal  " Don't interpret numbers starting with 0 as octal
  set ruler
  set sessionoptions-=options  " Don't save options in session files
  silent! set shortmess+=F
  set showcmd
  set sidescroll=1
  set smarttab
  set tabpagemax=50  " Increase maximum number of tab pages allowed
  set tags=./tags;,tags
  set ttimeout
  set ttimeoutlen=50
  set ttyfast
  set viminfo^=!  " Keep and store UPPERCASE global variables
  set wildmenu

  " Use UTF-8 if we can and env LANG didn't tell us not to
  if has('multi_byte') && !exists('$LANG') && &encoding ==# 'latin1'
    set encoding=utf-8
  endif

  " Set cursor shape based on mode (:h termcap-cursor-shape)
  " Vertical bar in insert mode
  let &t_SI = "\e[6 q"
  " Underline in replace mode
  let &t_SR = "\e[4 q"
  " Block in normal mode
  let &t_EI = "\e[2 q"
endif

" Neovim specific settings
if has('nvim')
  set inccommand=nosplit
  set backupdir-=.
endif

" Enable undofile if possible
if has('persistent_undo')
  set undofile
endif

" Color the whole area outside of 'textwidth'
let &colorcolumn = '+' . join(range(1, 256), ',+')

" Indent wrapped lines
silent! set breakindent

" Specify whitespace chars
set listchars=tab:>\ ,trail:-,extends:>,precedes:<,nbsp:+

" Let C/C++ filetypes set this
set path-=/usr/include

" Use ripgrep or ag as grepprg if available
if executable('rg')
  " Use rg over grep
  set grepprg=rg\ --vimgrep\ --smart-case
  set grepformat^=%f:%l:%c:%m
elseif executable('ag')
  " Use ag over grep
  set grepprg=ag\ --vimgrep\ --smart-case
  set grepformat^=%f:%l:%c:%m
endif

" GUI settings
if has('gui_running')
  set lines=60
  set columns=180
  if has('win32')
    set guioptions-=t
  endif
endif

" Wild menu
set wildcharm=<C-Z>
set wildmode=longest:full,full
set wildignorecase
set wildignore+=*/.git/**/*,*/.hg/**/*,*/.svn/**/*
set wildignore+=tags

" Keep temporary files in a single location (vim only)
if !has('nvim')
  if exists('$XDG_CACHE_HOME')
    let s:cachedir = $XDG_CACHE_HOME . '/vim'
  elseif isdirectory($HOME . '/Library/Caches/')
    let s:cachedir = $HOME . '/Library/Caches/vim'
  elseif has('unix')
    let s:cachedir = $HOME . '/.cache/vim'
  else
    let s:cachedir = $HOME . '/vimfiles/cache'
  endif

  let &backupdir = s:cachedir . '/backup//' . ',' . &backupdir
  let &undodir = s:cachedir . '/undo//' . ',' . &undodir
  let &directory = s:cachedir . '/swap//' . ',' . &directory

  " Create directories if they don't exist
  if exists('*mkdir')
    for opt in [&backupdir, &undodir, &directory]
      let dir = simplify(split(opt, ',')[0])
      if !isdirectory(dir)
        call mkdir(dir, 'p')
      endif
    endfor
  endif
endif

" Set dictionary if it exists
if empty(&dictionary) && filereadable('/usr/share/dict/words')
  set dictionary+=/usr/share/dict/words
endif

" }}}

" Mappings {{{

" Insert {{{

" jk in Insert mode escapes to Normal mode
inoremap jk <Esc>l

" Set a new 'undo point' before undoing entire line
inoremap <C-U> <C-G>u<C-U>

" Auto close braces in insert mode
inoremap {<CR> {<CR>}<Esc>ko

" Insert current date with <C-\>d
inoremap <silent> <C-\>d <C-R>=strftime('%Y-%m-%d')<CR>

" Insert current filename with <C-\>f
inoremap <silent> <C-\>f <C-R>=expand('%:t')<CR>

" Insert full path to file with <C-\>F
inoremap <silent> <C-\>F <C-R>=expand('%:p')<CR>

" Copy line above/below (similar to <C-Y>/<C-E> but works on the whole line)
inoremap <expr> <C-G><C-Y> repeat('<C-Y>', len(getline(line('.')-1))-col('.')+1)
inoremap <expr> <C-G><C-E> repeat('<C-E>', len(getline(line('.')-1))-col('.')+1)

" }}}

" Normal {{{

" Write file with ,w
nnoremap <Space>w :w<CR>

" Navigate through wrapped lines individually
nnoremap <silent> j gj
nnoremap <silent> k gk

" Map Q to gq
noremap Q gq

" Buffer shortcuts
for i in range(1, 10)
  exe 'nnoremap <Space>' . (i % 10) ':b' . i . '<CR>'
endfor

" List buffers and put :b on the command line
noremap <Space>b :buffers<CR>:b<Space>

" Map ,, to ,
" nnoremap ,, ,

" Find files in path
nnoremap <Space>f :find *

" Search for a tag by regex
nnoremap <Space>] :tjump /
nnoremap <Space>} :ptjump /

" Show tag stack
nnoremap <Space>t :tags<CR>

" Open quickfix list
nnoremap <Space>q :copen<CR>

" Open location list
nnoremap <Space>l :lopen<CR>

" Find files in current buffer's directory
nnoremap <Space>e :e %:p:h/<C-Z>

" Budget fuzzy file finder
nnoremap <C-P> :e **/*

" <Bslash>ev opens .vimrc in new window
nnoremap <Bslash>ev :<C-U>tabe $MYVIMRC<CR>:tcd %:h<CR>

" <Bslash>sv sources .vimrc
nnoremap <Bslash>sv :<C-U>source $MYVIMRC<CR>

" Clear search buffer with <C-L>
nnoremap <silent> <C-L> :<C-U>nohlsearch<Bar>diffupdate<CR><C-L>
vnoremap <silent> <C-L> :<C-U>nohlsearch<Bar>diffupdate<CR>gv<C-L>

" Format whole buffer with formatprg without changing cursor position
" See :h restore-position
nnoremap <Space>gq mzHmygggqG`yzt`z

" Modify contents of a register
nnoremap yr :<C-\>e'let @' . v:register . ' = ' . string(getreg(v:register))<CR><C-F>

" Show marks
nnoremap <Space>m :marks<CR>:norm! `

" Show only user placed marks (A-Z and a-z)
let s:alphabet = join(map(
      \ range(char2nr('A'), char2nr('Z')) + range(char2nr('a'), char2nr('z')),
      \ 'nr2char(v:val)'), '')
execute 'nnoremap <Space>M :marks ' . s:alphabet . '<CR>'
unlet s:alphabet

" }}}

" Visual {{{
xnoremap * y/\V<C-R>"<CR>
xnoremap # y?\V<C-R>"<CR>
" }}}

" Terminal {{{
if exists(':tmap') == 2
  tnoremap <silent> <C-W> <C-\><C-N><C-W>
  tnoremap <C-W><C-W> <C-W>
endif
" }}}

" Command {{{
cnoremap <C-P> <Up>
cnoremap <C-N> <Down>
" }}}

" }}}

" Abbreviations {{{

" Command {{{
" Sudo save
cnoreabbrev w!! w !sudo tee > /dev/null %
" }}}

" }}}

" Commands {{{

" This comes from vimrc_example.vim. See :h :DiffOrig
command! DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
      \ | wincmd p | diffthis

" Edit ftplugin file for current filetype
command! EditFtplugin
      \ if empty(&ft) |
      \   echohl Error | echo 'Error: This buffer has no filetype' |
      \ else |
      \   execute 'tabe ' . $VIMHOME . '/after/ftplugin/' . &ft . '.vim' |
      \ endif

" }}}

" Autocommands {{{
augroup vimrc
" Have Vim jump to the last position when reopening a file
autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$")
      \ | exe "normal! g`\"" | endif

" Set marks by filetype for quick navigation
autocmd BufLeave *.h mark H
autocmd BufLeave *.{c,cc,cpp} mark C

" Start insert immediately when terminal opens
if exists('##TermOpen')
  autocmd TermOpen * setlocal nonumber | startinsert
endif

if has('nvim')
  autocmd BufEnter term://* startinsert
endif

" Create syntax group for trailing whitespace in each new buffer
autocmd Syntax * syn match TrailingWhitespace /\s\+\%#\@<!$/ containedin=ALL

" Close preview window
autocmd CompleteDone * if !pumvisible() | pclose | endif

" Enable omnicompletion from syntax if no other option available
" See :h ft-syntax-omni
if exists('+omnifunc')
  autocmd FileType *
        \ if &omnifunc == '' |
        \   setlocal omnifunc=syntaxcomplete#Complete |
        \ endif
endif

augroup END
" }}}

" vim: fdl=0
