#!/usr/bin/env bash
# Simple bash script for creating and maintaining plaintext notes

set -e

if [ -f "${XDG_CONFIG_HOME:-$HOME/.config}"/note/config ]; then
    source "${XDG_CONFIG_HOME:-$HOME/.config}"/note/config
elif [ -z "$NOTES_DIR" ]; then
    NOTES_DIR=${XDG_DATA_HOME:-$HOME/.local/share}/note
fi

if [ -z "$NOTES_DIR" ]; then
    echo "Notes directory not set!" >&2
    return 1
fi

if [ ! -d "$NOTES_DIR" ]; then
    mkdir -p "$NOTES_DIR"
fi

usage() {
    echo "Usage:
    note s[how] <name>
    note o[pen] <name>
    note n[ew] <name>
    note l[ist]
    note g[rep] <pattern>
    note t[ag] [tag]
    note h[elp]
    note p[review]"
}

note() {
    if [ $# -lt 1 ]; then
        usage >&2
        return 1
    fi

    case "$1" in
        h|he|hel|help)
            usage
            return 0
            ;;
        s|sh|sho|show)
            if [ $# -lt 2 ]; then
                usage >&2
                return 1
            fi

            local note
            note="$NOTES_DIR"/"${2%.txt}".txt
            if [ ! -f "$note" ]; then
                echo "Note '$2' not found" >&2
                return 1
            fi
            cat "$note"
            ;;
        o|op|ope|open)
            if [ $# -lt 2 ]; then
                usage >&2
                return 1
            fi

            shift
            local notes
            notes=()
            for note in "$@"; do
                notes+=("$NOTES_DIR"/"${note%.txt}".txt)
            done

            cd "$NOTES_DIR" || return 1
            ${EDITOR:-vi} "${notes[@]}"
            ;;
        n|ne|new)
            if [ $# -lt 2 ]; then
                usage >&2
                return 1
            fi

            shift
            local title date fname file
            title="$*"
            date=$(date +%Y%m%d%H%M%S)
            fname="${date} $(sed -e 's/[^[:alnum:]]/_/g' -e 's/^_\|_$//' <<< "$*" | tr -s '_')"
            file="$NOTES_DIR"/"${fname//_/ }".txt
            cat > "$file" << EOF
Title:      $title
Date:       $(date +'%B %d, %Y')
Keywords:
EOF
            cd "$NOTES_DIR" || return 1
            ${EDITOR:-vi} "$file"
            ;;
        l|li|lis|list)
            local notes
            readarray -t notes < <(ls "$NOTES_DIR")
            if [ ${#notes} -eq 0 ]; then
                echo "You have no notes"
                return 0
            fi

            for note in "${notes[@]}"; do
                command basename -- "${note%.*}"
            done
            ;;
        g|gr|gre|grep)
            if [ $# -lt 2 ]; then
                usage >&2
                return 1
            fi

            shift
            cd "$NOTES_DIR" || return 1
            grep -i -H -C 1 --color=always "$*" -- * | less -R --no-init --quit-if-one-screen
            ;;
        t|ta|tag)
            if [ $# -lt 2 ]; then
                cd "$NOTES_DIR" || return 1
                awk 'tolower($1) ~ /(keywords|tags)/ {$1=""; print $0}' ./*.txt | tr ',' '\n' | sort -u | awk '{$1=$1;print}'
            else
                cd "$NOTES_DIR" || return 1
                grep -H -i -E '^(keywords|tags):' -- * | grep -F -w "$2" | cut -d : -f 1 | while IFS= read -r note; do
                    echo "${note%.*}"
                done
            fi
            ;;
        p|pr|pre|prev|previ|previe|preview)
            if [ $# -lt 2 ]; then
                usage >&2
                return 1
            fi

            local note
            note="$NOTES_DIR"/"${2%.txt}".txt
            if [ ! -f "$note" ]; then
                echo "Note '$2' not found" >&2
                return 1
            fi

            if ! command -v pandoc >/dev/null; then
                echo "Couldn't find pandoc" >&2
                return 1
            fi

            cd "$NOTES_DIR" || return 1
            tmp=$(mktemp).html
            pandoc --standalone --to html --from markdown --output "$tmp" "$note"

            if [ -n "$BROWSER" ]; then
                $BROWSER "$tmp"
            elif command -v xdg-open >/dev/null; then
                xdg-open "$tmp"
            elif command -v open >/dev/null; then
                open "$tmp"
            elif command -v firefox >/dev/null; then
                firefox "$tmp"
            fi
            ;;
        *)
            usage >&2
            return 1
            ;;
    esac
}
note "$@"
